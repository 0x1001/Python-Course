import unittest
import integer_sort
import timeit


class TestIntegerSort(unittest.TestCase):
    _SMALL_DATA = [1, 2, 4, 3, 0, -1, -10, 5]

    _BIG_DATA = [-137, -711, -771, 712, 426, -510, -288, 341, -572, 288, -746, -747, 991, 649, 810, -631, -704, -198,
                 -179, -656, 237, 410, -715, 386, 978, 937, -669, 662, -995, 175, -905, 33, 169, 900, -562, 853, 266,
                 -147, 405, 484, 145, 672, 131, -620, -751, 489, -667, 317, -419, 563, -144, -878, 51, -674, -223, -721,
                 789, 400, -969, -297, 109, 509, -681, 566, -149, -728, -787, -222, -119, -717, -981, 602, -857, 156,
                 -956, 919, -444, 932, 585, -359, 304, -970, 57, -126, 903, -50, 402, 804, 883, -338, -604, -743, -169,
                 322, -734, 247, 60, 143,-228, 96, 705, 808, 225, -635, -512, -617, -742, 509, 369, 88, 687, 511, -568,
                 409, -202, -922, -6, -70, -595, -648, 697, 912, -812, -476, 267, 520, -479, -618, -957, -331, 366,
                 -821, 287, 741, 355, -798, 369, 135, -359, -455, -633, 331, -182, -116, 719, -988, -855, 599, -937,
                 309, 8, -289, 939, -357, -659, -261, 574, 74, 35, -392, 936, 774, -300, 266, 995, 451, -719, 300, 363,
                 137, -249, -280, -95, 303, 438, 10, 729, -63, 436, -413, -967, -169,-854, -443, 50, -952, 581, -448,
                 739, 573, -91, -291, 500, -328, 535, -37, -740, 977, -713, -646, -835, 994, -355, -426, -342, -119,
                 839, 326, 468, -914, 760, -729, -48, 969, -867, 224, -571, -616, 534, 338, 0, -565, 730, 677, 713,
                 932, 741, 615, 50, 727, 19, 678, -984, -885, 644, 336, -781, -810, -19, -727, 629, 306, -182, -708,
                 -556, 766, 33, -20, -553, 432, -565, 592, -6, -14, 316, -965, 882, 895, 660, -833, -73, -820, 612,
                 -472, 904, 61, 413, 747, 874, 32, 461, -624, -70, 387, -95, -454, 441, 627, -948, -314, 364, -612,
                 684, -219, 348, -750, 122, -487, -576, 834, 448, 694, -668, 160, -370, 548, -89, -420, -452, -69,
                 -743, 162, -351, -909, -245, 755, -132, 289, 43, -48, 788, 316, 506, 587, -732, -169, -659, 624, 339,
                 49, -444, 509, 12, -795, 248, -523, 245, 619, 426, 861, -355, 775, 250, -625, -188, 424, -164, 737,
                 -449, 82, 499, -368, 221, -893, -988, 904, -569, -218, 634, -113, 317, -256, 50, 608, -659, -466, -781,
                 868, -342, -803, -438, 739, -630, 376, 590, -792, -993, -694, -175, 141, -865, 699, 799, -203, 95, 286,
                 -330, -756,-599, 604, 393, -923, 368, 967, 330, -887, 727, 529, -928, 592, 697, 374, -324, 337, -186,
                 -612, -889, 176, 450, 385, 126, 931, 0, 563, -562, 174, -793, 252, 473, 183, 4, -690, 465, -867, 965,
                 -661, -758, 147, 805, -231, -758, -807, 597, 630, 152, 812, 461, -555, -27, -860, -586, 266, 275, -938,
                 902, -951, 156, 683, -799, -960, -32, -701, 720, 765, -187, 889, -435, -667, 569, 394, 301, -868, -892,
                 839, -287, 904, -535, -305, 269, 689, 194, 790, 802, -86, 978, 299, -366, 536, -788, 277, -693, -543,
                 659, 469, 33, -78, 58, 740, -28, 756, -488, 306, 685, -689, 312, 871, -756, -904, -697, -11, 996, -292,
                 -541, 435, -801, -277, -994, -363, -905, -323, -782, 87, -895, 476, -268, 691, -365, -518, 662, 766,
                 786, 366, -780, 231, -992, -364, 188, 584, -33, -602, 335, 501, 109, -558, -353, -144, 549, -733, -296,
                 391, -461, 934, -973, -898, 617, -45, -386, 843, 801, 595, -172, 61, -560, -455, 12, 965, -41, -188,
                 -257, -526, -660, 493, 339, -994, -372, -588, -205, -233, -987, -654, 133, 774, -177, 267, 405, -66,
                 162, -678, 859, -456, -675, -145, 796, -230, 512, 844, -712, 219, -421, 766, -876, 883, 89, 229, -576,
                 465, 105, -842, -294, -95, -223, 927, 611, 567, 736, -271, 608, -372, -677, -788, -81, -458, -599,
                 -259, 252, -639, 577, -19, 601, -388, 167, 706, 767, -369, -563, 537, -539, 184, 519, -416, 378, -365,
                 -561, 61, -207, 559, 60, 543, -345, -300, -205, -489, 805, 195, -814, -249, -420, 730, 136, 742, -233,
                 -651, -349, -453, 945, 168, 782, 239, 797, 519, -502, 42, 374, -296, -494, 976, 603, 621, 425, -114,
                 -951, 481, -672, 148, 382, 942, 81, 402, -479, -617, -264, -770, 199, -603, 624, -604, -60, 149, 266,
                 -273, -155, 4, 356, -74,465, 499, 434, 914, -288, -194, 973, -696, -704, -396, 858, 848, -155, -685,
                 549, 765, -486, -310, 310, 790, 301, -783, -186, -989, -274, 962, -859, 13, -872, 741, -900, 795, 580,
                 579, -885, -345, 312, 535, -666, 605, 4, 108, 163, -49, 436, 363, -157, -263, -807, 897, -563, -877,
                 -560, -932, 117, -355, -519, -802, 271, 464, 887, -48, 327, 704, -323, 766, 67, 908, -314, 233, 851,
                 343, 438, -815, 910, -464, -448, -26, 557, 100, -481, 698, -490, -996, -140, 940, 643, -69, -676, -987,
                 -120, 34, -650, -224, -282, -19, 275, 340, -23, 484, 68, -168, -889, -912, 657, -334, -206, 576, 81,
                 -105, -146, 661, 508, -651, -198, 64, 576, -955, -384, 542, 705, -738, 469, -253, 501, 275, -118, -453,
                 396, -444, 555, -462, -843, -508, -1000, -242, -752, -274,92, -21, 166, -833, -435, 672, -155, -28,
                 -56, -558, -524, 325, -652, -539, -520, -626, 501, 949, 81, 131, -112, -601, 794, 580, -935, -449,
                 -821, 97, 424, -544, -445, -519, -543, -322, -470, -721, 765, 598, -567, 664, -521, -482, 574, 465,
                 355, -132, -31, -879, -688, -289, -451, 146, -973, -667, -529, 325, 986, -689, 315, 923, -814, -702,
                 136, -998, -126, -530, 874, 729, 957, -150, 266, 66, -632, -749, 379, 894, 616, 758, 172, 847, -735,
                 591, -63, 124, -253, 894, -293, 565, -798, 305, 749, -661, -918, 645, 907, -486, 1000, -798, -800, 172,
                 -784, -599, -91, 523, -779, 627, 939, 496, 823, -199, -534, 133, -89, 876, 751, -731, 312, 164, 125,
                 653, -655, 976, 676, -848, 792, 712, -836, -935, -239, 434, -639, 808, -268, 107, -19, 297, -806, -240,
                 -318, 114, 405, -742, -762, -779, 679, 341, -306, 262, -300, 556, -876, 266, -7, 600, -436, -93, 104,
                 344, -85, -895, -18, 648, 870, 635, -507, 838, -169, -162, 743, 630, -617, -475, 859, -386, -280, -116,
                 -15, -613, 382, 739, -573, -347, -442, -602, 489, 207, -349, -95, 300, 444, 614, -359, -973, -297, 360,
                 -156, -53, 356, 995, -959, 695, -1, -1000, -6, 931, -978, 613, -626, -18, 843, 503, -666, 523, 30,
                 -112, -317, -569, 290, 72, 539, -32, -376, -673, 238, 458, -585, -312, -486, -961, -40, -252, 97,
                 -235, 517, 280, 500, -468, 468, 1, -757, 199, 991, -65, 895, -291, 526, -548, -922, 960, 750, -298,
                 -705, 812, 365, -870, 149, -35, 621, 533, 706, -135, 361, 665, -464, -891, -147, 837, -859, 65, -650,
                 233, -968, -99, -634, 96, 938, -872, 706, 890, 619, -542, 599, 804, 328, -399, 122, 228, -27, -691,
                 430, 722, -996, -916, -557, 302, 271, 533, -552, 689, -86, 451, 908, -388, 609, 54, -211, 917, -445,
                 -686, 923, 441, 992, 443, 35, -359, -374, -330, 90, -123, -567, -538, -379, 904, 349, 127, -346, 919,
                 989, 871, -746, -361, -853, 812, 841, 818, -569, 162, -763, 879, 691, 771, 506, -518, 758, 34, 443,
                 -701, -914, 648, 939, -59, 830, -170, -642, -933, 119, -257, 690, 560, -16, 59, 108, -74, 679, -346,
                 316, -997, 461, -398, 317, -588, 624, 863, 348, 651, -920, -676, 605, 888, -155, 105, -414, -146, 117,
                 -460, 395, 424, -873, -906, 344, 664, 53, -322, -156, 40, -836, -719, -270, -588, 626, 301, -445, -445,
                 341, -623, -536, -789, -779, -162, -27, -339, 841, -29, -839, -180, -392, -360, -729, 513, 337, 579,
                 -63, -51, 907, -203, 613, 888, 913, -704, -34, 508, 670, 762, -142, 684, -958, -572, -485, -374, -146,
                 -325, -892, -549, -638, -893, -466, 816, 229, 57, 470, -503, 611, 394, -70, 943, -454, 381, -561, -611,
                 628, 74, -294, -689, 899, -490, -726, 146, 596, 804, 234, 180, 222, -348, 233, -449, 381, 642, -761,
                 951, -495, -246, -186, -604, 166, -56, -956, 688, -161, -531, 958, 238, 179, 551, -906, 509, -263,
                 -416, -140, -440, -493, 795, 391, 735, 740, 136, 406, 952, 1000, 927, -677, -984, 173, 107, 105, 955,
                 -697, 794, 35, -910, 950, 99, 892, -763, -807, 589, 853, -299, 900,577, -342, 646, -470, 759, -519,
                 -170, 961, -631, -883, 841, -472, 661, 874, 954, 230, -433, -818, 815, 802, -939, 365, -945, -883,
                 -681, 304, 376, 623, 920, -886, 740, 562, 896, -868, 408, 254, 156, -86, 492, 872, 694, -109, -111,
                 896, -321, -118, -201, -156, -11, 275, 973, 360, -635, -638, 709, -879, 184, 807, -799, 448, -749, 318,
                 309, -782, -661, -526, -288, -467, -800, 209, -353, -42, -55, 462, 303, -997, 121, -415, -639, 953,
                 -291, -478, -995, 225, 834, 151, -644, -862, -690, -488, 926, 520, -888, 853, 9, -119, 835, 85, -105,
                 267, -555, -357, 516, -587, 117, 892, 722, 271, 60, 786, 398,161, 367, 193, 231, -677, -446, -529,
                 -737, -935, -117, -802, -218, 471, 201, -732, 103, -900, -341, 443, 740, 372, -266, -272, -602, -545,
                 398, -189, -615, 122, 202, -679, -844, 536, 142, -528, -5, 972, 65, 721]

    def test_insertion_sort_return_type(self):
        self.assertIsInstance(integer_sort.insertion_sort([]), list)

    def test_insertion_sort_empty_list(self):
        data = []
        new_data = integer_sort.insertion_sort(data)
        self.assertEquals(new_data, [])
        self.assertIsNot(data, new_data)

    def test_insertion_sort_one_item(self):
        self.assertEquals(integer_sort.insertion_sort([1]), [1])

    def test_insertion_sort_same_data(self):
        self.assertEquals(integer_sort.insertion_sort([1, 1, 1, 1]), [1, 1, 1, 1])

    def test_insertion_sort_small_data(self):
        data = self._SMALL_DATA[:]
        self.assertEquals(integer_sort.insertion_sort(data), sorted(self._SMALL_DATA))
        self.assertEquals(data, self._SMALL_DATA)

    def test_insertion_sort_input_data_was_not_changed(self):
        data = self._SMALL_DATA[:]
        integer_sort.insertion_sort(data)
        self.assertEquals(data, self._SMALL_DATA)

    def test_insertion_sort_big_data(self):
        self.assertEquals(integer_sort.insertion_sort(self._BIG_DATA), sorted(self._BIG_DATA))

    def test_merge_sort_return_type(self):
        self.assertIsInstance(integer_sort.merge_sort([]), list)

    def test_merge_sort_empty_list(self):
        data = []
        new_data = integer_sort.merge_sort(data)
        self.assertEquals(new_data, [])
        self.assertIsNot(data, new_data)

    def test_merge_sort_one_item(self):
        self.assertEquals(integer_sort.merge_sort([1]), [1])

    def test_merge_sort_same_data(self):
        self.assertEquals(integer_sort.merge_sort([1, 1, 1, 1]), [1, 1, 1, 1])

    def test_merge_sort_small_data(self):
        data = self._SMALL_DATA[:]
        self.assertEquals(integer_sort.merge_sort(data), sorted(self._SMALL_DATA))
        self.assertEquals(data, self._SMALL_DATA)

    def test_merge_sort_input_data_was_not_changed(self):
        data = self._SMALL_DATA[:]
        integer_sort.merge_sort(data)
        self.assertEquals(data, self._SMALL_DATA)

    def test_merge_sort_big_data(self):
        self.assertEquals(integer_sort.merge_sort(self._BIG_DATA), sorted(self._BIG_DATA))

    def test_sort_time_compare(self):
        t1 = timeit.Timer(lambda: integer_sort.insertion_sort(self._BIG_DATA)).timeit(1)
        t2 = timeit.Timer(lambda: integer_sort.merge_sort(self._BIG_DATA)).timeit(1)

        self.assertGreater(t1, t2)
